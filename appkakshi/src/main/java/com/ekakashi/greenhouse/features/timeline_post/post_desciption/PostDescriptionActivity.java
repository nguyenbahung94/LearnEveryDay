package com.ekakashi.greenhouse.features.timeline_post.post_desciption;import android.content.Intent;import android.os.Bundle;import android.support.v7.widget.DefaultItemAnimator;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.util.Log;import com.ekakashi.greenhouse.R;import com.ekakashi.greenhouse.common.BaseActivity;import com.ekakashi.greenhouse.common.MyToolbar;import com.ekakashi.greenhouse.common.Prefs;import com.ekakashi.greenhouse.common.Utils;import com.ekakashi.greenhouse.database.model_server_response.FertilizerResponse;import com.ekakashi.greenhouse.database.model_server_response.WorkTypeResponse;import com.ekakashi.greenhouse.features.timeline_filter.FilterInterface;import com.ekakashi.greenhouse.features.timeline_filter.models.FilterField;import java.util.ArrayList;public class PostDescriptionActivity extends BaseActivity implements PostDescriptionInterface.View, FilterInterface.AutoTurnBack {    private PostDescriptionPresenter mPresenter;    private RecyclerView rvDescription;    private PostDescriptionAdapter postDescriptionAdapter;    private FertilizerAdapter fertilizerAdapter;    private WorktypeAdapter worktypeAdapter;    private ArrayList<PostDescriptionItem> workplaceList;    private ArrayList<WorkTypeResponse.WorkType> workTypeList;    private ArrayList<PostDescriptionItem> targetCropList;    private ArrayList<PostDescriptionItem> diseaseList;    private ArrayList<PostDescriptionItem> pesticideList;    private ArrayList<FertilizerResponse.Fertilizer> fertilizerList;    private ArrayList<FilterField> fieldList;    private PostDescriptionModel descriptionModel;    private int TYPE;    private final int EDIT = 1;    private final int POST = 2;    private int postType;    private final int TARGET_CROP = 0;    private final int WORK_TYPE = 1;    private final int WORK_PLACE = 2;    private final int DISEASE = 3;    private final int PESTICIDE = 4;    private final int FERTILIZER = 5;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_post_description);        addControls();        initPresenter();    }    private void addToolbar(String type) {        MyToolbar myToolbar = new MyToolbar(mToolbar);        myToolbar.setUpToolbarLeft(Utils.Name.TOOLBAR_LEFT_BACK_BUTTON);        myToolbar.setUpTextCenter(Utils.Name.TOOLBAR_CENTER_TEXT_ONLY, type, "");        myToolbar.setToolbarListener(new MyToolbar.ToolbarListener() {            @Override            public void onToolbarLeftListener() {                onBackPressed();            }            @Override            public void onToolbarRightListener() {            }        });    }    private void addControls() {        rvDescription = findViewById(R.id.rvDescription);    }    private void createAdapter(ArrayList<PostDescriptionItem> list) {        postDescriptionAdapter = new PostDescriptionAdapter(this, list, this);        fertilizerAdapter = new FertilizerAdapter(this, fertilizerList, this);        worktypeAdapter = new WorktypeAdapter(this, workTypeList, this);        setUpRecyclerview();    }    private void setUpRecyclerview() {        LinearLayoutManager layoutManager = new LinearLayoutManager(this);        layoutManager.setOrientation(LinearLayoutManager.VERTICAL);        rvDescription.setLayoutManager(layoutManager);        rvDescription.setItemAnimator(new DefaultItemAnimator());        if (postType == FERTILIZER) {            rvDescription.setAdapter(fertilizerAdapter);        } else if (postType == WORK_TYPE) {            rvDescription.setAdapter(worktypeAdapter);        } else {            rvDescription.setAdapter(postDescriptionAdapter);        }    }    @Override    public void initPresenter() {        Intent intent = getIntent();        TYPE = intent.getIntExtra(Utils.Constant.TIMELINE_POST_EDIT, POST);        postType = intent.getIntExtra(Utils.Constant.TIMELINE_POST_TYPE, 0);        workplaceList = new ArrayList<>();        mPresenter = new PostDescriptionPresenter(this, this);        switch (postType) {            case WORK_PLACE:                addToolbar(getResources().getString(R.string.post_workplace));                descriptionModel = intent.getParcelableExtra(Utils.Constant.TIMELINE_POST_DATA);                if (descriptionModel != null) {                    fieldList = descriptionModel.getWorkplaceList();                    for (FilterField field : fieldList) {                        workplaceList.add(new PostDescriptionItem(field.getPlaceName(), field.isSelected()));                    }                    createAdapter(workplaceList);                }                break;            case WORK_TYPE:                addToolbar(getResources().getString(R.string.post_work_type));                descriptionModel = intent.getParcelableExtra(Utils.Constant.TIMELINE_POST_DATA);                if (descriptionModel != null) {                    workTypeList = descriptionModel.getWorkTypeList();                    if (workTypeList == null) {                        mPresenter.getWorkType(descriptionModel.getWorkPlaceID());                    } else {                        createAdapter(convertListWorktypeToPostDescription(workTypeList));                    }                }                break;            case TARGET_CROP:                addToolbar(getResources().getString(R.string.post_target_crop));                descriptionModel = intent.getParcelableExtra(Utils.Constant.TIMELINE_POST_DATA);                if (descriptionModel != null) {                    targetCropList = descriptionModel.getTargetCropList();                    if (targetCropList == null) {                        mPresenter.getTargetCrop(descriptionModel.getWorkPlaceID());                    } else {                        createAdapter(targetCropList);                    }                }                break;            case DISEASE:                addToolbar(getResources().getString(R.string.post_disease));                descriptionModel = intent.getParcelableExtra(Utils.Constant.TIMELINE_POST_DATA);                if (descriptionModel != null) {                    diseaseList = descriptionModel.getDiseaseList();                    if (diseaseList == null) {                        mPresenter.getDisease();                    } else {                        createAdapter(diseaseList);                    }                }                break;            case PESTICIDE:                addToolbar(getResources().getString(R.string.post_pesticide));                descriptionModel = intent.getParcelableExtra(Utils.Constant.TIMELINE_POST_DATA);                if (descriptionModel != null) {                    pesticideList = descriptionModel.getPesticideList();                    if (pesticideList == null) {                        mPresenter.getPesticide();                    } else {                        createAdapter(pesticideList);                    }                }                break;            case FERTILIZER:                addToolbar(getResources().getString(R.string.post_fertilizer));                descriptionModel = intent.getParcelableExtra(Utils.Constant.TIMELINE_POST_DATA);                if (descriptionModel != null) {                    fertilizerList = descriptionModel.getFertilizerList();                    if (fertilizerList == null) {                        mPresenter.getFertilizer();                    } else {                        createAdapter(convertListFertilizerToPostDescription(fertilizerList));                    }                }                break;            default:                break;        }    }    @Override    public void onBackPressed() {        Intent intent = new Intent();        switch (postType) {            case WORK_PLACE:                for (int i = 0; i < workplaceList.size(); i++) {                    fieldList.get(i).setSelected(false);                    if (workplaceList.get(i).isSelected()) {                        fieldList.get(i).setSelected(true);                    }                }                descriptionModel.setWorkplaceList(fieldList);                break;            case WORK_TYPE:                descriptionModel.setWorkTypeList(workTypeList);                break;            case TARGET_CROP:                descriptionModel.setTargetCropList(targetCropList);                break;            case DISEASE:                descriptionModel.setDiseaseList(diseaseList);                break;            case PESTICIDE:                descriptionModel.setPesticideList(pesticideList);                break;            case FERTILIZER:                descriptionModel.setFertilizerList(fertilizerList);                break;            default:                break;        }        intent.putExtra("PostData", descriptionModel);        setResult(RESULT_OK, intent);        super.onBackPressed();    }    @Override    public void onPesticideSuccess(ArrayList<String> list) {        pesticideList = new ArrayList<>();        pesticideList.add(new PostDescriptionItem(getString(R.string.post_none), true));        for (String name : list) {            if (!name.equalsIgnoreCase(getString(R.string.post_none)) && !name.equalsIgnoreCase(getString(R.string.post_other))) {                pesticideList.add(new PostDescriptionItem(name.trim(), false));            }        }        pesticideList.add(new PostDescriptionItem(getString(R.string.post_other), false));        if (TYPE == EDIT) {            Intent intent = getIntent();            String data = intent.getStringExtra(Utils.Constant.TIMELINE_EDIT_DATA);            for (PostDescriptionItem item : pesticideList) {                if (item.getName().equals(data)) {                    item.setSelected(true);                } else {                    item.setSelected(false);                }            }            createAdapter(pesticideList);        } else {            createAdapter(pesticideList);        }    }    @Override    public void onWorkTypeSuccess(ArrayList<WorkTypeResponse.WorkType> list) {        if (list != null) {            workTypeList = new ArrayList<>();            workTypeList.add(new WorkTypeResponse.WorkType(getString(R.string.post_none), true));            for (WorkTypeResponse.WorkType workType : list) {                if (!workType.getName().equalsIgnoreCase(getString(R.string.post_none))                        && !workType.getName().equalsIgnoreCase(getString(R.string.post_other))) {                    workTypeList.add(workType);                }            }            workTypeList.add(new WorkTypeResponse.WorkType(getString(R.string.post_other), false));            if (TYPE == EDIT) {                Intent intent = getIntent();                String data = intent.getStringExtra(Utils.Constant.TIMELINE_EDIT_DATA);                String locale = Prefs.getInstance(this).getLocale();                for (WorkTypeResponse.WorkType workType : workTypeList) {                    if ((locale.equals(Utils.Name.LOCALE_JA) && workType.getNameJapan().equals(data))                            || (locale.equals(Utils.Name.LOCALE_EN) && workType.getName().equals(data))) {                        workType.setSelected(true);                    } else {                        workType.setSelected(false);                    }                }                createAdapter(convertListWorktypeToPostDescription(workTypeList));            } else {                createAdapter(convertListWorktypeToPostDescription(workTypeList));            }        }    }    @Override    public void onTargetCropSuccess(ArrayList<String> list) {        targetCropList = new ArrayList<>();        targetCropList.add(new PostDescriptionItem(getString(R.string.post_none), true));        for (String name : list) {            if (!name.equalsIgnoreCase(getString(R.string.post_none)) && !name.equalsIgnoreCase(getString(R.string.post_other))) {                targetCropList.add(new PostDescriptionItem(name.trim(), false));            }        }        targetCropList.add(new PostDescriptionItem(getString(R.string.post_other), false));        if (TYPE == EDIT) {            Intent intent = getIntent();            String data = intent.getStringExtra(Utils.Constant.TIMELINE_EDIT_DATA);            for (PostDescriptionItem item : targetCropList) {                if (item.getName().equals(data)) {                    item.setSelected(true);                } else {                    item.setSelected(false);                }            }            createAdapter(targetCropList);        } else {            createAdapter(targetCropList);        }    }    @Override    public void onFertilizerSuccess(ArrayList<FertilizerResponse.Fertilizer> list) {        if (list != null) {            fertilizerList = new ArrayList<>();            fertilizerList.add(new FertilizerResponse.Fertilizer(getString(R.string.post_none), true));            for (FertilizerResponse.Fertilizer fertilizer : list) {                if (!fertilizer.getDescription().equalsIgnoreCase(getString(R.string.post_none))                        && !fertilizer.getDescription().equalsIgnoreCase(getString(R.string.post_other))) {                    fertilizerList.add(fertilizer);                }            }            fertilizerList.add(new FertilizerResponse.Fertilizer(getString(R.string.post_other), false));            if (TYPE == EDIT) {                Intent intent = getIntent();                String data = intent.getStringExtra(Utils.Constant.TIMELINE_EDIT_DATA);                for (FertilizerResponse.Fertilizer fertilizer : fertilizerList) {                    if (fertilizer.getDescription().equals(data)) {                        fertilizer.setSelected(true);                    } else {                        fertilizer.setSelected(false);                    }                }                createAdapter(convertListFertilizerToPostDescription(fertilizerList));            } else {                createAdapter(convertListFertilizerToPostDescription(fertilizerList));            }        }    }    @Override    public void onDiseaseSuccess(ArrayList<String> list) {        diseaseList = new ArrayList<>();        diseaseList.add(new PostDescriptionItem(getString(R.string.post_none), true));        for (String name : list) {            if (!name.equalsIgnoreCase(getString(R.string.post_none)) && !name.equalsIgnoreCase(getString(R.string.post_other))) {                diseaseList.add(new PostDescriptionItem(name.trim(), false));            }        }        diseaseList.add(new PostDescriptionItem(getString(R.string.post_other), false));        if (TYPE == EDIT) {            Intent intent = getIntent();            String data = intent.getStringExtra(Utils.Constant.TIMELINE_EDIT_DATA);            for (PostDescriptionItem item : diseaseList) {                if (item.getName().equals(data)) {                    item.setSelected(true);                } else {                    item.setSelected(false);                }            }            createAdapter(diseaseList);        } else {            createAdapter(diseaseList);        }    }    @Override    public void onWorkTypeFail() {    }    @Override    public void onTargetCropFail() {    }    @Override    public void onPesticideFail() {        Log.e("PostDescriptionActivity", "onPesticideFail");    }    @Override    public void onFertilizerFail() {        Log.e("PostDescriptionActivity", "onFertilizerFail");    }    @Override    public void onDiseaseFail() {        Log.e("PostDescriptionActivity", "onDiseaseFail");    }    @Override    public void onAutoTurnBack() {        onBackPressed();    }    @Override    public void tokenExpired() {        hideLoadingDialog();        Utils.tokenExpired(this);    }    private ArrayList<PostDescriptionItem> convertListFertilizerToPostDescription(ArrayList<FertilizerResponse.Fertilizer> fertilizerList) {        ArrayList<PostDescriptionItem> list = new ArrayList<>();        for (FertilizerResponse.Fertilizer fertilizer : fertilizerList) {            list.add(new PostDescriptionItem(fertilizer.getDescription(), fertilizer.isSelected()));        }        return list;    }    private ArrayList<PostDescriptionItem> convertListWorktypeToPostDescription(ArrayList<WorkTypeResponse.WorkType> workTypeList) {        ArrayList<PostDescriptionItem> list = new ArrayList<>();        String locale = Prefs.getInstance(this).getLocale();        if (locale.equals(Utils.Name.LOCALE_JA)) {            for (WorkTypeResponse.WorkType workType : workTypeList) {                list.add(new PostDescriptionItem(workType.getNameJapan(), workType.isSelected()));            }        } else {            for (WorkTypeResponse.WorkType workType : workTypeList) {                list.add(new PostDescriptionItem(workType.getName(), workType.isSelected()));            }        }        return list;    }    @Override    protected void onDestroy() {        super.onDestroy();        fertilizerList = null;        workTypeList = null;        mPresenter = null;    }}